
#ifdef GL_ES
precision mediump float;
#endif

uniform float time;
uniform vec2 mouse;
uniform vec2 resolution;


#define REP 100

vec3 toCol(float t) {
	return vec3(t * 0.05);
}

float map(vec3 p) {
	return cos(p.x) + cos(p.y) + cos(p.z);
}

vec3 normal(in vec3 pos){
	vec2 offset = vec2(0.001,0);
	vec3 nDir = normalize(
		vec3(
			map(pos+offset.xyy)-map(pos-offset.xyy),
			map(pos+offset.yxy)-map(pos-offset.yxy),
			map(pos+offset.yyx)-map(pos-offset.yyx)
		)
	);
	return nDir;
}

vec2 rot(vec2 p, float a) {
	return vec2(
		p.x * cos(a) - p.y * sin(a),
		p.x * sin(a) + p.y * cos(a));
}

void main( void ) {
	vec2 uv = -1.0 + 2.0 * ( gl_FragCoord.xy / resolution.xy );
	uv.x *= resolution.x / resolution.y;
	vec3 dir = normalize(vec3(uv, 1.0));
	vec3 pos = vec3(0, 0, time);
	dir.xy = rot(dir.xy, time * 0.2);
	float t = 0.0;
	for(int i = 0 ; i < REP; i++) {
		float g = map(pos + dir * t);
		t += g;
		vec3  ya = (pos + dir * t);
		vec3  bo = cross(uv.xyy, ya);
		dir += cross(-ya, dir * t) * 0.0005;
		pos += cross(-bo - ya, dir * t) * 0.00001;
		
		dir.xz = rot(dir.xz, g * 0.003);
		dir.zy = rot(dir.zy, g * 0.05);
		dir = normalize(dir);
	}
	vec3 col = normal(pos + dir * t) + t * 0.09;
	gl_FragColor = vec4(col, 1.0);

}