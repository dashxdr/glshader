#ifdef GL_ES
precision mediump float;
#endif

//sphere surface with fishes, m.c. escher

uniform float time;
uniform vec2 mouse;
uniform vec2 resolution;

const float PI = 3.14156;

struct Ray{
	vec3 p,v;
};
	
struct Sphere{
	vec3 o;
	float r;
};
	
struct Hit{
	float hit;
	vec3 p;
};
	
Hit hit(Ray ray,Sphere sphere){
	vec3 o = sphere.o - ray.p;
	float p = - 2.0 * dot(ray.v,o)  / dot(ray.v,ray.v);
	float q = (dot(o,o) - sphere.r * sphere.r) / dot(ray.v,ray.v);
	float temp = p*p*0.25 - q;
	return Hit(
		step(0.0,temp), temp >= 0.0 ? ray.p + ray.v * (-p*0.5 - sqrt(temp)) : vec3(0)
	);
}

vec3 rotateY(in vec3 v, in float a) {
	return vec3(cos(a)*v.x + sin(a)*v.z, v.y,-sin(a)*v.x + cos(a)*v.z);
}

vec3 rotateX(in vec3 v, in float a) {
	return vec3(v.x,cos(a)*v.y + sin(a)*v.z,-sin(a)*v.y + cos(a)*v.z);
}

float hash2 (vec2 p) {
	return fract(sin(p.x*15.0 + p.y*35.7)*49379.37);	
}

float noise2(vec2 p){
	vec2 iP = floor(p);
	vec2 fP = fract(p);
	
	return mix(
		mix(hash2(iP + vec2(0,0)),hash2(iP + vec2(0,1)),fP.y),
		mix(hash2(iP + vec2(1,0)),hash2(iP + vec2(1,1)),fP.y),
		fP.x
	);
	return 0.0;
}

float stretch(float x, float oldMin,float oldMax,float newMin,float newMax){
	return (x-oldMin)/(oldMax-oldMin) * (newMax - newMin) + newMin;
}

float pattern(vec2 uv){
	uv.y = 1.12 * abs(2.0 * uv.y - 1.0) - 0.06;
	
	float h = uv.x < 0.1 ? stretch(-uv.x,-0.1,0.0,0.2,1.0):
		  uv.x < 0.3 ? stretch(uv.x,0.1,0.2,0.2,0.35):
		  uv.x < 0.5 ? stretch(-uv.x,-0.5,-0.3,0.0,0.5) :
		  uv.x < 0.65 ? stretch(uv.x,0.5,0.65,0.0,0.8) :
		  uv.x < 0.85 ? stretch(-uv.x,-0.85,-0.65,0.5,0.8) : 
			stretch(uv.x,0.85,1.0,0.5,1.0);
	
	float eye1 = step(abs(distance(vec2(2.0,0.4),vec2(3.0 * uv.x, uv.y)) - 0.15),0.03);
	float eye2 = step(0.03,abs(distance(vec2(0.4,0.6),vec2(3.0 * uv.x, uv.y)) - 0.15));
	return (step(h,uv.y) + step(uv.y,0.0) + eye1) * step(uv.y,1.0) * eye2;
}

vec3 map(vec2 p){
	float t = smoothstep(0.05,0.09,min(fract(p.x*60.0),fract(p.y*60.0)));
	 
	float u = -log(1.0 - 2.0 * abs(p.y - 0.5)) + sign(p.y - 0.5) * p.x;
	u -= step(0.0,p.y-0.5) * 2.0 * u;
	u *= 2.0;
	
	float v = +log(1.0 - 2.0 * abs(p.y - 0.5)) + sign(p.y - 0.5) * 6.0 *  p.x;
	v -= step(0.0,p.y-0.5) * 2.0 * v;
	
	return mix(
		vec3(0.3),
		mix(vec3(0.42),1.15 * vec3(0.7,0.7,0.6),pattern(fract(vec2(-v,u)))),
		t
	);
}

void main( void ) {
	vec2 uv = ( gl_FragCoord.xy / resolution.xy ) - 0.5;
	uv.x *= resolution.x/resolution.y;
	
	Ray ray = Ray(vec3(0,0,0),normalize(vec3(uv.x,uv.y,1)));
	Sphere sphere = Sphere(vec3(0.2,0,5.4),2.0);
	
	Hit h = hit(ray,sphere);
	
	vec3 n = normalize(h.p - sphere.o);
	float light = dot(n,vec3(0,0,-1));
	
	n = rotateY(n,-0.3);
	n = rotateX(n,-0.9);
	n = rotateY(n,-0.1 * time);

	float angleX = (atan(n.z,n.x) + PI)/(2.0 * PI);
	float angleY = acos(n.y)/PI;
	
	gl_FragColor.w = 1.0;
	gl_FragColor.xyz = mix(
		vec3(0.7,0.7,0.6) * (distance(uv,vec2(0.2,-0.3)) + 0.1),
		light * map(vec2(angleX,angleY)),
		h.hit
	) + 0.15 * (noise2(gl_FragCoord.xy/2.0)-0.5);
}