#ifdef GL_ES
precision mediump float;
#endif

uniform float time;
uniform vec2 mouse;
uniform vec2 resolution;



float hash(vec2 uv)
{
	return fract(cos(uv.x-sin(uv.y))*12345.6789);
}

vec2 neighbor_offset(float i)
{
	float x = floor(i/3.);
	float y = mod(i, 3.);
	return vec2(x,y)-1.;
}

float voronoi (vec2 p) 
{
	vec2 g = floor(p);
	vec2 f = fract(p);
	float res = 1.;
	vec2 bb = vec2(0.);
	
	for(int i = 0; i < 9; i++) 
	{
		vec2 b = neighbor_offset(float(i));
		float  h = distance(hash(g+b)+b, f);
		res = min(res, h);
	}
	return res;
}

float sphere(vec3 position, float radius)
{
	return length(position)-radius;
}

float cube(vec3 p, vec3 s)
{
	vec3 d = (abs(p) - s);
	return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));
}

vec3 cartesian_to_spherical(vec3 c)
{
    vec3 s;
    s.x = length(c);
    s.y = atan(c.z / c.x);
    s.z = asin(c.y / s.x);
	return s;
}

mat2 rmat(in float t)
{
	float c = cos(t);
	float s = sin(t);
	return mat2(c, s, -s, c);
}

mat3 rmat(in vec3 r)
{
	vec3 a = vec3(cos(r.x)*cos(r.y),sin(r.y),sin(r.x)*cos(r.y));
	
	float c = cos(r.z);
	float s = sin(r.z);
	vec3 as  = a*s;
	vec3 ac  = a*a*(1.- c);
	vec3 ad  = a.yzx*a.zxy*(1.-c);
	mat3 rot = mat3(
		c    + ac.x, 
		ad.z - as.z, 
        	ad.y + as.y,
		ad.z + as.z, 
		c    + ac.y, 
		ad.x - as.x,
		ad.y - as.y, 
		ad.x + as.x, 
		c    + ac.z);
	return rot;	
}

float map(vec3 position)
{
	position 	= position - vec3(0., 0., 5.);
	mat3 rm		= rmat(vec3(.17, .31, .63)*-time*.0125);
	position 	*= rmat(vec3(mouse.x * 6.28 + 1.51, mouse.y * 6.28, 3.14));
	vec3 origin 	= position;

	float v 	= 0.;
	float a 	= .25;
	float f 	= 4.5;
	for(int i = 0; i < 5; i++)
	{
		position 	*= rm;
		v 		+= voronoi(position.x + .35 * position.yz * f) * a;
		position	= abs(v*v-position)-5.-v*.5;
		position.xyz 	= position.zxy;
		position.xz	+= .125*position.yx*rmat(abs(.125-v));
		f 		*= 1.5;
		a 		*= .75-v;
	}
	v += voronoi(origin.xz-origin.y-time*.0125)*.25;
	return sphere(origin, 2. - v*.125);
}


float shadow(vec3 p, vec3 d)
{
	const int iterations	= 8;
 	float e       		= .02;
	const float u		= 1.;  		   
    	float s 		= 1.;         
    	for( int i=0; i < iterations; i++ )
    	{
    		float l = map(p + d * e);
		l 	= l < 0. ? l - l * .5 : l;
		
    		s 	= min(s, u*l/e);
    	    	e 	+= .00025;
    	}
	return clamp(s, 0.0, 1.);
}

float occlusion( in vec3 p, in vec3 n )
{
	
  	float occ = 0.0;
  	float sca = 1.;
  	for ( int i=0; i < 8; i++ )
  	{
  		float hr = 0.125 * sca * float(i);
    		float dd = map(n * hr + p);
    		occ += -(dd-hr)*sca;
    		sca *= 0.99;
  	}
  	return clamp( 1.0 - 3.0 * occ, 0.0, 1.0 );
}

vec3 derive(in vec3 position, in float range)
{
	vec2 offset     = vec2(0., range);
	vec3 normal     = vec3(0.);
	normal.x    	= map(position+offset.yxx)-map(position-offset.yxx);
	normal.y    	= map(position+offset.xyx)-map(position-offset.xyx);
	normal.z    	= map(position+offset.xxy)-map(position-offset.xxy);
	return normalize(normal);
}


void main( void ) 
{
	vec2 aspect		= resolution.xy/resolution.yy;
	
	vec2 uv 		= gl_FragCoord.xy/resolution.xy;
	uv 			= (uv - .5) * aspect;
	
	vec2 m			= (mouse-.5) * aspect;
	
	
	
	vec3 direction  	= normalize(vec3(uv, 1.));
	vec3 origin		= vec3(0.);
	vec3 position		= origin;
	
	
	
	//raytrace
	float range		= 0.;
	float total_range	= 0.;
	float minimum_range	= .0001;
	float max_range		= 6.;
	float closest_range	= max_range;
	float edge		= 0.;
	for(int count = 0; count < 64; count++)
	{
		range 		= map(position);
		range 		= range < 0. ? range - range * .5 : range;
			
		
		range	 	*= .8;		//slow down ray
		minimum_range	*= 1.03;	//relax surface
		
		total_range	+= range;
		
		position 	= origin + direction * total_range;	
		
		if(closest_range > range)
		{
			edge += 1./64.;	
		}
		
		closest_range	= min(closest_range, abs(range));
		
		
		if(range < minimum_range || total_range > max_range)
		{
			break;	
		}
		
		
		
	}
	
	
	//shade
	vec3 background_color 	= vec3(.275, .275, .45) - uv.y * .5;
	vec3 material_color	= vec3(.8, .45, .25) * 1.5;
	
	vec3 color 		= background_color;
	if(total_range < max_range)
	{
		vec3 normal	 	= derive(position, minimum_range);
	
		vec3 light_position 	= vec3(2.,8., -3.);
		vec3 light_direction	= normalize(light_position-position);
		
		float light		= max(dot(normal, light_direction), 0.);
		
		
		color 			+= material_color * light;
		color 			-= max(material_color/total_range, .25);
		color			*= shadow(position, light_direction);
		color 			*= occlusion(position, normal);
		color 			+= 3. * edge * background_color;
	}
	else
	{
		color += material_color * edge;	
	}
		
	
	gl_FragColor 		= vec4(color, 1.);
}//sphinx