#ifdef GL_ES
precision mediump float;
#endif

uniform float time;
uniform vec2 mouse;
uniform vec2 resolution;
// Rendezvous. By David Hoskins. Jan 2014.
// A Kleinian thingy, breathing, and with pumping arteries!
// https://www.shadertoy.com/view/ldjGDw

#define CSize  vec3(.808, .8, 1.137)
#define FogColour vec3(.02, .015, .01)


//----------------------------------------------------------------------------------------
float Map( vec3 p )
{
	float scale = 1.0;

	for( int i=0; i < 7;i++ )
	{
		p = 2.0*clamp(p, -CSize, CSize) - p;
		float r2 = dot(p,p);
		float k = max(1.1/r2, 1.);
		p     *= k;
		scale *= k;
	}
	float l = length(p.xy);
	float rxy = l - 4.0;
	float n = l * p.z;
	rxy = max(rxy, -(n) / (length(p))-.07+sin(time*2.0+23.5*p.z)*.02);
	return (rxy) / abs(scale);
}

//----------------------------------------------------------------------------------------
vec3 Colour( vec3 p )
{
	float scale	= 1.0;
	float col	= 0.0;
	float r2	= dot(p,p);
	float rmin	= 1000.0;
	
	for( int i=0; i < 10;i++ )
	{
		vec3 p1= 2.0 * clamp(p, -CSize, CSize)-p;
		col += abs(p.z-p1.z);
		p = p1;
		r2 = dot(p,p);
		float k = max(1.1/r2,1.);
		p	  *= k;
		scale *= k;
		r2 = dot(p, p);
		rmin = min(rmin, r2);
	}
	
	return mix(vec3((rmin)),(0.5+0.5*sin(col*vec3(.647,-1.072,5.067))),.9);
}

//----------------------------------------------------------------------------------------
float RayMarch( in vec3 ro, in vec3 rd )
{
	float precis = 0.0005;
    float h		 = precis*.2;
    float t		 = 0.01;
	float res	 = 200.0;
	bool hit	 = false;
	// If I rearrange the loop in a more logical way,
	// I get a black screen on Windows.
    for( int i = 0; i < 150; i++ )
    {
		if (!hit && t < 8.0)
		{
			h = Map(ro + rd * t);
			if (h < precis)
			{
				res = t;
				hit = true;
			}
			t += h * .8;
			precis *= 1.03;
		}
    }
	
    return res;
}

//----------------------------------------------------------------------------------------
float Shadow(in vec3 ro, in vec3 rd, float dist)
{
	float res = 1.0;
    float t = 0.01;
	float h = 0.0;
    
	for (int i = 0; i < 12; i++)
	{
		// Don't run past the point light source...
		if(t < dist)
		{
			h = Map(ro + rd * t);
			res = min(4.0*h / t, res);
			t += h + 0.002;
		}
	}
    return clamp(res, 0.0, 1.0);
}

//----------------------------------------------------------------------------------------
vec3 Normal(in vec3 pos)
{
	vec3  eps = vec3(0.0002,0.0,0.0);
	vec3 nor = vec3(Map(pos+eps.xyy) - Map(pos-eps.xyy),
					Map(pos+eps.yxy) - Map(pos-eps.yxy),
					Map(pos+eps.yyx) - Map(pos-eps.yyx));
	return normalize(nor);
}

//----------------------------------------------------------------------------------------
float LightGlow(vec3 light, vec3 ray, float t)
{
	float ret = 0.0;
	if (length(light) < t)
	{
		light = normalize(light);
		ret = pow(max(dot(light, ray), 0.0), 3000.0)*1.5;
	}
		
	return ret;
}

//----------------------------------------------------------------------------------------
void main(void)
{
	vec2 q = gl_FragCoord.xy/resolution.xy;
    	vec2 p = -1.0+2.0*q;
	p.x *= resolution.x/resolution.y;
	
	float gTime = sin(1.6+time*.05)*11.5;
    	// camera
	float height = (smoothstep(9.4, 11.5, abs(gTime))*.5);
	vec3 origin = vec3( 1.2, gTime+1.8, 2.5+height);
	vec3 target = vec3(.0+sin(gTime), 0.0, 2.5-height*4.0);
	
	vec3 cw = normalize( target-origin);
	vec3 cp = normalize(vec3(0.0, 0.0, 1.));
	vec3 cu = normalize( cross(cw,cp) );
	vec3 cv = cross(cu,cw);
	vec3 ray = normalize( p.x*cu + p.y*cv + 2.6*cw );	
	
	vec3 lightPos = origin+vec3(-0.56-cos(gTime*2.0+1.3)*.3, -1.5, .25+cos(gTime*2.0)*.3);
	float intensity = .7+.3*sin(gTime*10.0);
	float t = RayMarch(origin, ray);
	vec3 col = vec3(0.0);
	if(t < 199.0)
	{
		vec3 pos = origin + t * ray;
		vec3 nor = Normal(pos);

		vec3  lightPos  = lightPos-pos;
		float lightDist = length(lightPos);
		vec3  lightDir  = normalize(lightPos);
				
		float bri = max( dot( lightDir, nor ), 0.0) * intensity;
		float spe = max(dot(reflect(ray, nor), lightDir), 0.0);
		float amb = max(-nor.z*.012, 0.0);
		float sha = clamp(Shadow(pos+nor*0.005, lightDir, lightDist) / max(lightDist-2.0, 0.1), 0.0, 1.0);

		bri = amb + bri * sha;
		col =  Colour(pos) * bri + pow(spe, 18.0) * sha * .3;

	}
	
	// Effects...
	col = mix(FogColour, col, exp(-.6*max(t-3.0, 0.0)));
	col += LightGlow(lightPos-origin, ray, t) * intensity;

	col = pow(col, vec3(.45));
	col *= pow(50.0*q.x*q.y*(1.0-q.x)*(1.0-q.y), 0.25);
	
	gl_FragColor=vec4(clamp(col, 0.0, 1.0),1.0);
}
