#ifdef GL_ES
precision mediump float;
#endif

uniform float time;
uniform vec2 mouse;
uniform vec2 resolution;

void main( void ) {

	vec2 pos = 1.0 * ( (gl_FragCoord.xy-.5*resolution.xy) / resolution.xx);

	vec2 p1 = vec2(1.0, 0.66);
	vec2 p2 = vec2(-1.0, 0.66);
	vec2 p3 = vec2(0.0, -4.0);
p3 += 10.0*(mouse - vec2(.5));

	float d1, d2, d3;
	d1 = length(p1-p2);
	d2 = length(p2-p3);
	d3 = length(p3-p1);

	float r1 = (d1 + d3 - d2) / 2.0;
	float r2 = (d2 + d1 - d3) / 2.0;
	float r3 = (d3 + d2 - d1) / 2.0;

	vec3 color = vec3(0.0);
	
	if(length(pos - p1) < r1 ||
	   		length(pos - p2) < r2 ||
	   		length(pos - p3) < r3)
		color = vec3(1.0);
else
{
	float n = 0.0;

	for(int i=0;i<5;++i)
	{
		vec2 center;
		float rcenter;
		float a = 1.0 / r1;
		float b = 1.0 / r2;
		float c = 1.0 / r3;
		float t = 2.0 * sqrt(a*b + a*c + b*c);
		float d = a + b + c + t;
		float r4 = 1.0 / d;
		float r14 = r4 + r1;
		float r24 = r4 + r2;
		float r34 = r4 + r3;

		float v1 = 2.0 * (p1.x - p2.x);
		float v2 = 2.0 * (p1.y - p2.y);
		float v4 = 2.0 * (p3.x - p2.x);
		float v5 = 2.0 * (p3.y - p2.y);
		float v3, v6;
		v3 = v6 = r24*r24 - p2.x*p2.x - p2.y*p2.y;
		v3 += p1.x*p1.x + p1.y*p1.y - r14*r14;
		v6 += p3.x*p3.x + p3.y*p3.y - r34*r34;
		rcenter = r4;
		center.x = (v3*v5 - v2*v6) / (v1*v5 - v2*v4);
		center.y = (v3*v4 - v1*v6) / (v2*v4 - v1*v5);

		if(length(pos - center) <= r4)
		{
			float tt = sin(n + .11);
			color = vec3(fract(tt) , fract(tt*6.0), fract(tt*13.0));
			break;
		}
		vec2 cp = pos - center;
		vec2 c1 = p1 - center;
		vec2 c2 = p2 - center;
		vec2 c3 = p3 - center;
		float cross1 = c1.x * cp.y - c1.y * cp.x;
		float cross2 = c2.x * cp.y - c2.y * cp.x;
		float cross3 = c3.x * cp.y - c3.y * cp.x;

		n = n * 3.0;
		if(cross1>=0.0 && cross2<0.0) {p3 = center;r3 = rcenter;n += 3.0;}
		else if(cross2>=0.0 && cross3<0.0) {p1 = center;r1 = rcenter; n += 1.0;}
		else {p2 = center;r2 = rcenter;n += 2.0;}

		
	}
}
	gl_FragColor = vec4( color , 1.0 );

}
