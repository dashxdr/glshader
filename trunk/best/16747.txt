#ifdef GL_ES
precision mediump float;
#endif

uniform float time;
uniform vec2 mouse;
uniform vec2 resolution;
varying vec2 surfacePosition;

// IQ Noise
float hash( float n ) { return fract(sin(n)*43758.5453123); }
float noise( in vec3 x )
{
    vec3 p = floor(x);
    vec3 f = fract(x);
    f = f*f*(3.0-2.0*f);
	
    float n = p.x + p.y*157.0 + 113.0*p.z;
    return mix(mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),
                   mix( hash(n+157.0), hash(n+158.0),f.x),f.y),
               mix(mix( hash(n+113.0), hash(n+114.0),f.x),
                   mix( hash(n+270.0), hash(n+271.0),f.x),f.y),f.z);
}


const mat3 m = mat3( 0.00,  0.80,  0.60,
                    -0.80,  0.36, -0.48,
                    -0.60, -0.48,  0.64 );



float fbm(vec3 mo) {
	float v = 0.;
	float m = 1.;
	for (int i=0; i < 3; i ++) {
		m *= 0.45;
		v += noise(mo) * m;
		mo *= 1.23;
		
	}
	return v;
}

float pallet(vec3 s) {
	float f = fbm(s);
	return floor(f*8.0);
}


void main( void ) {

	vec2 uv  = surfacePosition*10.0;
	
	
	float f1 = pallet(vec3(uv, time * 0.2 ));
	float f2 = pallet(vec3(uv, time * 0.2 + 4.2));
	float f3 = pallet(vec3(uv, time * 0.2 + 2.2));
	vec3 color  = (f1<3.0) ? vec3(.294, .357, .255) : vec3(.118, .180, .137);
	color = (f2 < 3.0) ? color : vec3(.541, .573, .337);
	color = (f3 < 4.0) ? color : vec3(.851, .820, .537);
	
	gl_FragColor = vec4( color , 1.0 );

}
