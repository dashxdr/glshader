#ifdef GL_ES
precision mediump float;
#endif 

// Kabutos 2nd Revision 2014 live coding entry
// WebGL remix (modified a bit to make up for the lack of predefined textures and music FFT data)


uniform float time; // in seconds
uniform vec2 resolution; // viewport resolution
uniform sampler2D backbuffer;


float iFFT0 = cos(time)*.2;
float iFFT1 = cos(time*2.)*.2;
float iFFT2 = cos(time*3.)*.2;
float iFFT3 = cos(time*4.)*.2;


float noise(vec2 vec) {
	return sin(vec.x*4.)*sin(vec.y*4.)*.2+sin(vec.x*5.)*sin(vec.y*5.)*.1+.4;
}

void main(void)
{
	vec2 uv = vec2( gl_FragCoord.xy -resolution*.5) / resolution.x;

	vec3 pos=vec3(sin(time),cos(time),time*10.+iFFT0*5.);

	vec3 dir=normalize(vec3(uv,1));

	float a=-.27;

	dir*=mat3(1,0,0,0,cos(a),sin(a),0,-sin(a),cos(a));



	vec3 vox=floor(pos);





	vec3 norm,hit;

	float bright;



	



	vec3 color=vec3(0);



	for(int i=0;i<50;i++){

		vec3 dist=vox-pos+step(vec3(0),dir);

		vec3 mx=dist/dir;

		norm=mx.x<mx.y&&mx.x<mx.z?vec3(1,0,0):mx.y<mx.z?vec3(0,1,0):vec3(0,0,1);

		vox += norm*sign(dir);

		hit=pos+dot(norm,mx)*dir;

		vec3 d=vox*.7;

		float dens=d.y*.5+noise(d.xz*.1+iFFT0)*6.+.3;

		if (dens<0.)break;

		bright=(49.-float(i))/50.;

		float dens2=hit.y*.5+noise(hit.xz*.1+iFFT0)*6.+.3;

		color += dot(.5-abs(fract(hit)-.5),vec3(1))*.2/dens+vec3(-1,-1,1)*step(fract(dens2),.004)*step(fract(dens),.1)*10.;

	}

	vec4 t = texture2D(backbuffer,fract(-hit.xy))*norm.z+texture2D(backbuffer,fract(-hit.xz))*norm.y+3.;
	gl_FragColor = vec4((t*bright+(color.xyzz-6.+vec4(iFFT1,iFFT2,iFFT3,0)*8.4)*.4).xyz,1);
}
