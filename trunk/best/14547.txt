#ifdef GL_ES
precision mediump float;
#endif
#define highp

uniform float time;
uniform vec2 mouse;
uniform vec2 resolution;

float volFunc(vec3 p)
{
	float a = 0.0;
	float fp = 0.45;
	const int n = 22;
	float pa = 0.0;
	
	for(int i = 0; i < n; ++i)
	{
		p=abs(p)/dot(p,p)-fp;
		a+=abs(length(p)-pa);
		pa=length(p);
	}
	
	a /= float(n);
	return a*a*a*0.625;
}

vec3 volumeIntegrate(vec3 start, vec3 dir, float s)
{
	vec3 rad = vec3(0.0);
	const int n = 12;
	const float rn = 1.0 / float(n);
	float d = 0.0;
	vec3 p = start + dir * rn;
	float i = 0.0;
	
	for(int k = 0; k < n; ++k)
	{
		rad += vec3(i,i*i,i*i*i) * volFunc(p) * rn;
	
		float ds = rn * s;
		p += dir * ds;
		d += ds;
		i += rn;
	}
	
	rad.b += pow(0.5*(1.0-abs(rad.r - rad.g)),3.0);
	return (rad*0.85);
}

float sceneFunc(vec3 p)
{
	vec3 c = vec3(0.0,0.0,0.0);
	float r = 4.0 + 0.125*(sin(2.0*p.x*p.y+time*5.0));
	return length(p-c) - r;
}

highp vec3 sceneGrad(highp vec3 p)
{
    const highp float h = 0.001;
    highp vec3 g;
    g.x = sceneFunc(p+vec3(h,0.0,0.0)) - sceneFunc(p-vec3(h,0.0,0.0));
    g.y = sceneFunc(p+vec3(0.0,h,0.0)) - sceneFunc(p-vec3(0.0,h,0.0));
    g.z = sceneFunc(p+vec3(0.0,0.0,h)) - sceneFunc(p-vec3(0.0,0.0,h));
    return g / (2.0*h);
}

highp mat4 lookAtInv(highp vec3 eyePos, highp vec3 targetPos, highp vec3 upVector)
{
    highp vec3 forward = normalize(targetPos - eyePos);
    highp vec3 right = normalize(cross(forward,upVector));
    upVector = normalize(cross(right,forward));
    
    highp mat4 r;
    r[0] = vec4(right,0.0);
    r[1] = vec4(upVector,0.0);
    r[2] = vec4(-forward,0.0);
    r[3] = vec4(eyePos,1.0);
    return r;
}

void main(void)
{
	float k = -3.75 + 1.0*sin(time*0.1);
	highp vec2 uv = gl_FragCoord.xy / vec2(resolution.x,resolution.y);
	highp vec2 ndc = (uv-0.5)*2.0;
	highp float aspect = resolution.x/resolution.y;
	highp vec3 camPos = vec3(ndc.x,ndc.y/aspect,0.0);
	highp vec3 camDir = normalize(vec3(ndc.x,ndc.y/aspect,k)); //normalize(vec3(aspect*(uv.x-0.5),uv.y-0.5,-1.0));
	
	float phi = time*0.025;
	highp mat4 m = lookAtInv(vec3(15.0*cos(phi),sin(phi)*15.0,20.0),
							 vec3(0.0,0.0,0.0),vec3(0.0,1.0,0.0));
	
	camPos = ( m * vec4(camPos,1.0) ).xyz;
        camDir = ( m * vec4(camDir,0.0) ).xyz;
	
	vec3 rad = vec3(0.0);
	
	float dist = 0.0;
	const int n = 45;
	vec3 p = camPos;
	bool hit = false;
	
	for(int i = 0; i < n; ++i)
	{
		vec3 p = camPos + camDir * dist;
		float d = sceneFunc(p);
		if(d < 0.000065)
		{
			vec3 norm = normalize(sceneGrad(p));

			vec3 lpos = vec3(0.0,5.0,0.0);
			vec3 toL = normalize(lpos - p);
			vec3 hv = normalize(toL - camDir);
			
			float ndl = max(0.0,dot(norm,lpos));
			float ndhv = max(0.0,dot(norm,hv));
			
			vec3 ref = camDir - 2.0 * (dot(camDir,norm)*norm);
			ref = normalize(ref);
			rad = (0.06 +vec3(ndl)*0.75 + 0.5*pow(ndhv,8.0)) * volumeIntegrate(camPos,ref, dist);
			
			hit = true;
			break;
		}
		
		dist += d;
	}
	
	if(!hit)
	{
		dist = 100.0;
		rad += volumeIntegrate(camPos,camDir, dist);
	}

	
	gl_FragColor = vec4(pow(rad,vec3(1.0/2.2)),1.0);
}
