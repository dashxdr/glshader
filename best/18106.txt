
#ifdef GL_ES
precision mediump float;
#endif
//#ifdef GL_ES
//precision mediump float;
//#endif

uniform float time;
uniform vec2 mouse;
uniform vec2 resolution;
varying vec2 surfacePosition;

float sphere(vec3 ray, vec3 dir, vec3 center, float radius)
{
 vec3 rc = ray-center;
 float c = dot(rc, rc) - (radius*radius);
 float b = dot(dir, rc);
 float d = b*b - c;
 float t = -b - sqrt(abs(d));
 float st = step(0.0, min(t,d));
 return mix(-1.0, t, st);
}

vec3 background(float t, vec3 rd)
{
 vec3 light = normalize(vec3(0.6, sin(t), cos(t)));
 float sun = max(0.0, dot(rd, light));
 float sky = max(0.0, dot(rd, vec3(0.0, 1.0, 0.0)));
 float ground = max(0.0, -dot(rd, vec3(0.0, 1.0, 0.0)));
 float check =floor(mod((rd.x /rd.y),2.0)+1.0);
 return 
  (pow(sun, 256.0)+0.2*pow(sun, 2.0))* max(0.0,sin(t))* vec3(2.0, 1.6, 1.0) +
  ceil(ground)*vec3(0.7*check, 0.3*check, 0.2*check) +
  pow(sky, 1.0)*vec3(cos(t), sin(t), max(0.0,sin(t))+0.4);
}

void main(void)
{
 vec2 uv =    surfacePosition*2.0;

 vec3 ro = vec3(0.0, 0.0, -3.0);
 vec3 rd = normalize(vec3(uv, 1.0));
 vec3 p = vec3((mouse.x-0.5)*3.0, 0.3*sin(time), 0.0);
 float t = sphere(ro, rd, p, 1.0);
 float bt=time/10.0;
 vec3 nml = normalize(p - (ro+rd*t));
 vec3 bgCol = background(bt,rd);
 rd = reflect(rd, -nml);
 vec3 col = background(bt, rd) * vec3(0.9, 0.8, 1.0);
 gl_FragColor = vec4( mix(bgCol, col, step(0.0, t)), 1.0 );
}
