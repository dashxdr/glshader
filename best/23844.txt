
#ifdef GL_ES
precision mediump float;
#endif

uniform float time;
uniform vec2 mouse;
uniform vec2 resolution;


vec3 get_sphere_pos(int i)
{
	float a = float(i) + time; 
	return vec3(cos(a),cos(a)*sin(a),sin(a*0.4)); 
}
vec3 get_sphere_color(int i) 	
{
	float a = float(i); 
	return normalize(vec3(cos(a),cos(a)*sin(a),sin(a*0.4))); 	
}

float isph(in vec3 ro, in vec3 rd, in vec3 pos)
{
	ro -= pos; 
	float r = 0.1;  
	float A = dot(rd, rd); 
	float B = 2.0*dot(ro, rd); 
	float C = dot(ro, ro) - r*r; 
	
	float disc = B*B - 4.0*A*C;
	if (disc < 0.0)
		return -1.0; 
	float discSqrt = sqrt(disc); 
	float q; 
	if (B < 0.0)
		q = (-B - discSqrt)/2.0; 
	else
		q = (-B + discSqrt)/2.0; 
	float t0 = q/A; 
	//return t0; 
	float t1 = C/q; 
	return min(t0,t1); 
	
}

vec3 get_sphere_normal(in vec3 p, int obj)
{
	return normalize(p-get_sphere_pos(obj)); 
}

void main( void ) {

	vec2 p = 2.0*( gl_FragCoord.xy / resolution.xy ) - 1.0;
	p.x *= resolution.x/resolution.y;
	
	vec3 color = vec3(1,1,1)*(0.1 + (1.0-length(p))*0.2);  	


	vec3 ro = vec3(0,0,2.0);
	vec3 rd = normalize(vec3(p.x,p.y,-1.0)); 
	
	vec3 pos;
	float tmin = 10000.0; 
	int obj = 0; 
	for (int i = 0; i < 100; i+=1) {
		float a = float(i) + time; 
	 	float t = isph(ro,rd, get_sphere_pos(i)); 
		if (t > 0.0 && t < tmin) {
			tmin = t; 
			obj = i; 
		}
	}
	if (tmin > 0.0 && tmin < 100.0) {
		pos = ro + tmin*rd;
		
		vec3 n = get_sphere_normal(pos, obj); 
		float diff = clamp(dot(n, vec3(1,0,0)), 0.0, 1.0); 
		float lumi = clamp(dot(n, -rd), 0.0, 1.0); 
		color = mix(vec3(1,1,1), get_sphere_color(obj),lumi); 
		color *= 10.0*(pos.y - get_sphere_pos(obj).y); 
		
	}
	
	
	gl_FragColor = vec4(color, 1.0); 
}