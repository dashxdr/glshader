#ifdef GL_ES
precision mediump float;
#endif

uniform sampler2D tex;

uniform vec2 resolution;
uniform float time; 

vec3 rotatey(in vec3 p, float ang)
{
	return vec3(p.x*cos(ang)-p.z*sin(ang),p.y,p.x*sin(ang)+p.z*cos(ang)); 
}

vec2 sph0(vec3 p, float time)
{
	p = rotatey(p, time*0.01);
	//p.x = mod(p.x+0.5,1.0)-0.5; 
	//p.y = mod(p.y+0.5,1.0)-0.5; 
	p.x += sin(time)*0.0; 
	p.y += abs(-sin(time*0.03))*0.0; 
//	p.z += sin(time*3.0)*5.0; 
	float d0 = length(p) - 0.5;  
	for (int i = 0; i < 8; i++) {
		float a = float(i)*100.0; 
		d0 += sin( time*0.01+(sin(time*0.01)*50.0+55.0)*dot(p,vec3(sin(a),cos(a*a),sin(a*a*a))))*0.1; 
	}
	float d1 = length(p) - 0.5; 
	return vec2( mix(d0,d1,0.97), 1.0); 
}

vec2 pln0(vec3 p, float time)
{
	vec3 n = normalize(vec3(0,1,0)); 
	return vec2(dot(p,n)+0.5, 1.0);  
}
float scene(vec3 p, float time)
{
	float d = 1000.0; 
	d = min(d,sph0(p, time).x); 
	d = min(d,pln0(p, time).x); 
	return d;
}

vec3 get_normal(vec3 p,float time)
{
	vec3 eps = vec3(0.001,0,0); 
	float nx = scene(p + eps.xyy,time) - scene(p - eps.xyy,time); 
	float ny = scene(p + eps.yxy,time) - scene(p - eps.yxy,time); 
	float nz = scene(p + eps.yyx,time) - scene(p - eps.yyx,time); 
	return normalize(vec3(nx,ny,nz)); 
}

float ambientOcclusion(vec3 p, vec3 n)
{
    const int steps = 3;
    const float delta = 0.50;

    float a = 0.0;
    float weight = 1.0;
    for(int i=1; i<=steps; i++) {
        float d = (float(i) / float(steps)) * delta; 
        a += weight*(d - scene(p + n*d,time));
        weight *= 0.5;
    }
    return clamp(1.0 - a, 0.0, 1.0);
}

vec3 rm(out vec3 pos, out float obj_id, in vec3 ro, in vec3 rd,float time)
{
	vec3 color = vec3(0); 
	obj_id = -1.0;
	pos = ro; 
	float dist = 0.0; 
	float d; 
	for (int i = 0; i < 96; i++) {
		d = scene(pos, time);
		pos += rd*d;
		dist += d;	
	}
	if (dist < 100.0 && d < 1.0) {
		vec3 lightpos = vec3(100.0,0.0,0.0); 
		vec3 n = get_normal(pos, time);
		//vec3 l = normalize(vec3(1,0,0.0)); 
		vec3 l = normalize(lightpos-pos); 
		vec3 r = reflect(n, l); 
		float diff = 0.1*clamp(dot(n, normalize(vec3(0,-5,1))), 0.0, 1.0); 
		float amb = 0.1; 
		float spec0 = 0.3*pow(clamp(dot(r*vec3(1.0,1.0,1.0), normalize(vec3(-1.0,0,1.0))),0.0,1.0), 64.0); 
		float spec1 = 0.5*pow(clamp(dot(r, normalize(vec3(1.0,0,2.0))),0.0,1.0), 20.0); 
		float spec2 = 3.0*pow(clamp(dot(r, normalize(vec3(0.0,0.5,1.0))),0.0,1.0), 10.0); 
		float fres = clamp(dot(n,-rd), 0.0, 1.0); 
		float shade = ambientOcclusion(pos+0.01*n, n); 
		color = 0.0*diff*vec3(1.0)/dist + amb*vec3(1.0,1.0,1.0)*clamp(pos.y,0.0,1.0)*1.0 + spec0*vec3(1,1,1) + smoothstep(0.0,1.0,spec1)*vec3(1,1,1) + 1.0*pow(spec1,2.0)*vec3(1,1,1);
		color += mix(vec3(1,1,1)*1.0,vec3(1,1,1)*0.1,fres); 
		color += smoothstep(0.0,0.5,spec2)*vec3(1,1,1)*clamp(n.y,0.0,1.0)*1.0; 
		color *= shade; 
		obj_id = 1.0;
	}
	return color; 
}

void main()
{
	vec2 p = 2.0 * (gl_FragCoord.xy / resolution) - 1.0; 
	p.x *= resolution.x/resolution.y; 
	vec3 color = vec3(0); 


	
	vec3 ro = vec3(0,0,1.5); 
	vec3 rd = normalize(vec3(p.x,p.y,-1.5));  

	vec3 pos; 
	float obj_id;
	float tot_obj_id = 0.0; 
	for (int i = 0; i < 1; i++) {
		float a = float(i); 
		color += rm(pos,obj_id, ro, rd, time*40.0+a*0.05);
		tot_obj_id += obj_id; 
	}
	color /= 1.0; 
	if (tot_obj_id < 0.00) { // nothing hit
		color = vec3(1.0-length(p*0.5))*0.4; 
	}
	// letterbox
	if (abs(p.y) > 0.75) color = vec3(0); 
	gl_FragColor = vec4(color, 1.0); 
}
