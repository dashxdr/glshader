#ifdef GL_ES
precision mediump float;
#endif

uniform float time;
uniform vec2 resolution;

// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.
// David Hoskins.
// https://www.shadertoy.com/view/Md2GDy

float gTime = pow(abs((.57+cos(time*.2)*.55)), 3.0);


vec3 Fractal(vec2 uv)
{
	vec2 p = gTime * ((resolution.xy-uv)/resolution.y) - gTime * 0.5 + 0.363;
	vec2 z = p;
	float g = 10.0, f = 10.0;
	for( int i = 0; i < 90; i++ ) 
	{
		float w = float(i)*23.+ time*2.0;
		vec2 z1 = vec2(2.*cos(w),2.*sin(w));		   
		z = vec2( z.x*z.x-z.y*z.y, 2.0 *z.x*z.y ) + p;
		g = min( g, dot(z-z1,z-z1));
		f = min( f, dot(z,z) );
	}
	g =  pow(max(1.0-g, 0.0), .15);
	// Eye colours...
	vec3 col = mix(vec3(g), vec3(.3, .5, .1), smoothstep(.89, .91, g));
	col = mix(col, vec3(.0), smoothstep(.97, .99, g));
	col = mix(col, vec3(0.0, 0.0, abs(log(f)/10.0)), 1.0-g);
	return clamp(col, 0.0, 1.0);
}

void main( void )
{
	// Anti-aliasing...
	vec3 col = vec3(0.0);
	for (int y = 0; y < 2; y++)
	{
		for (int x = 0; x < 2; x++)
		{
			col += Fractal(gl_FragCoord.xy + vec2(float(x)*.5, float(y)*.5));
		}
	}
	
	gl_FragColor = vec4(col / 4.0, 1.0);
}
