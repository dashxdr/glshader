#ifdef GL_ES
precision mediump float;
#endif

uniform float time;
uniform vec2 resolution;

#define OCTAVES 3

// Squish and strech the tunnel
#define STRETCH 10.0
#define SQUISH 1.0

// Everthing should be a tunnel :)
// From http://glsl.heroku.com/e#11554.0

float rand(vec2 n) { 
	return fract(sin(dot(n, vec2(13, 5))) * 43758.5453);
}

float noise(vec2 n) {
	const vec2 d = vec2(0.0, 1.0);
	vec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));
	return mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);
}

float fbm(vec2 n) {
	float total = 0.0, amplitude = 1.0;
	for (int i = 0; i < OCTAVES; i++) {
		total += noise(n) * amplitude;
		n += n;
		amplitude *= 0.5;
	}
	return total;
}

vec3 tex(vec2 pos) {
	const vec3 c1 = vec3(0.1, 0.0, 0.0);
	const vec3 c2 = vec3(0.7, 0.0, 0.0);
	const vec3 c3 = vec3(0.2, 0.0, 0.0);
	const vec3 c4 = vec3(1.0, 0.9, 0.0);
	const vec3 c5 = vec3(0.1);
	const vec3 c6 = vec3(0.9);
	vec2 p = pos;
	float q = fbm(p - time * -0.1);
	vec2 r = vec2(fbm(p + q + time * 0.7 - p.x - p.y), fbm(p + q - time * 0.0));
	vec3 c = mix(c1, c2, fbm(p + r)) + mix(c3, c4, r.x) - mix(c5, c6, r.y);
	//return vec3(c * cos(1.57 * pos.x));
	return c;
}


void main(void)
{
    // Mirror the y to get rid of join
    // since I'm not smart enough to tile the noise
    float y = gl_FragCoord.y > (resolution.y*0.5) ? gl_FragCoord.y : resolution.y-gl_FragCoord.y;
	
    vec2 p = -1.0 + 2.0 * vec2(gl_FragCoord.x,y) / resolution.xy;
    float a = atan(p.x,p.y);
    float r = sqrt(dot(p,p));
    vec2 uv;
    uv.x = time+SQUISH/r;
    uv.y = a/3.14159265*STRETCH;
    vec3 col =  tex(uv);
    gl_FragColor = vec4(col*r,1);
}

