#ifdef GL_ES
precision mediump float;
#endif

uniform float time;
uniform vec2 mouse;
uniform vec2 resolution;

vec4 mod289(vec4 x)
{
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 permute(vec4 x)
{
  return mod289(((x*34.0)+1.0)*x);
}

vec4 taylorInvSqrt(vec4 r)
{
  return 1.79284291400159 - 0.85373472095314 * r;
}

vec2 fade(vec2 t) {
  return t*t*t*(t*(t*6.0-15.0)+10.0);
}

// Classic Perlin noise
float cnoise(vec2 P)
{
  vec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0);
  vec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0);
  Pi = mod289(Pi); // To avoid truncation effects in permutation
  vec4 ix = Pi.xzxz;
  vec4 iy = Pi.yyww;
  vec4 fx = Pf.xzxz;
  vec4 fy = Pf.yyww;

  vec4 i = permute(permute(ix) + iy);

  vec4 gx = fract(i * (1.0 / 41.0)) * 2.0 - 1.0 ;
  vec4 gy = abs(gx) - 0.5 ;
  vec4 tx = floor(gx + 0.5);
  gx = gx - tx;

  vec2 g00 = vec2(gx.x,gy.x);
  vec2 g10 = vec2(gx.y,gy.y);
  vec2 g01 = vec2(gx.z,gy.z);
  vec2 g11 = vec2(gx.w,gy.w);

  vec4 norm = taylorInvSqrt(vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11)));
  g00 *= norm.x;  
  g01 *= norm.y;  
  g10 *= norm.z;  
  g11 *= norm.w;  
	
  /*g00 /= mod(time,10.0)*5.0;
  g01 /= mod(time,10.0)*5.0;
  g10 /= mod(time,10.0)*5.0;
  g11 /= mod(time,10.0)*5.0;*/
	
  float n00 = dot(g00, vec2(fx.x, fy.x));
  float n10 = dot(g10, vec2(fx.y, fy.y));
  float n01 = dot(g01, vec2(fx.z, fy.z));
  float n11 = dot(g11, vec2(fx.w, fy.w));

  vec2 fade_xy = fade(Pf.xy);
  vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);
  float n_xy = mix(n_x.x, n_x.y, fade_xy.y);
  return ((2.3 * n_xy) + 1.0) / 2.0;
}

	float raymarch(vec3 ray_origin, vec3 ray_direction) {
	    float h;
	    vec3 p;
	    
	    for (float i = 0.01; i < 2.0; i += 0.05) {
	        p = ray_origin + ray_direction*i;
	        h = cnoise(p.xz);
	        
	        if (p.y < h) {
	            return i;
	        }
	    }
	    
	    return 0.0;
	}
	
	void main() {
	    vec2 uv = -1.0 + 2.0*(gl_FragCoord.xy / resolution.xy);
		
	    float z = cnoise(uv.xy);
	    
	    //vec3 eye_pos = vec3(0.0+mouse.x*10.0, 1.0, -1.0+(mod(time,1000.0)));
		
		vec3 eye_pos = vec3(mouse.x*10.0, 1.0, -1.0+(mod(time,1000.0)));
		
	    //vec3 ray_dir = normalize(vec3(uv.xy,1.0));
		
		vec3 ray_dir = normalize(vec3(uv.xy,1.0));
	    
	    float d = raymarch(eye_pos, ray_dir);
		//float d = -1.0;
	    
	    if (d > 0.0) {
		vec3 r = eye_pos+ray_dir*d;
		gl_FragColor = vec4((sqrt(2.0*pow(cnoise(r.xz),0.5))*vec3(0.75,0.5,0.5)),1.0);
	    }
	    else {
	        gl_FragColor = vec4(0.0,0.7,1.0,1.0);
	    }
    }