#ifdef GL_ES
precision mediump float;
#endif

uniform float time;
uniform vec2 mouse;
uniform vec2 resolution;

float map(vec3 p)
{
	float t = (length( mod(abs(p.xz), 20.0) - 10.0) - (2.2 + p.y * 0.07));
	t = max(t, 0.5 - dot(p, vec3(0,1,0))) ;
	return t;
}

vec3 calcNormal(in vec3 pos)
{
    vec3  eps = vec3(.01,0.0,0.0);
    vec3 nor;
    nor.x = map(pos+eps.xyy) - map(pos-eps.xyy);
    nor.y = map(pos+eps.yxy) - map(pos-eps.yxy);
    nor.z = map(pos+eps.yyx) - map(pos-eps.yyx);
    return normalize(nor);
}

vec2 rot(vec2 p, float a)
{
	float c = cos(a);
	float s = sin(a);
	return vec2(p.x * c - p.y * s, p.x * s + p.y * c);
}

void main( void ) {
	vec2 uv = -1.0 + 2.0 * (gl_FragCoord.xy / resolution.xy );
	vec3 pos = vec3(0,-3.0,2.0 + time);
	vec3 dir = normalize(vec3(uv * vec2(resolution.x / resolution.y, -1), 1));
	dir.yz = rot(dir.yz, -0.28);
	dir.xz = rot(dir.xz, -0.78);
	dir.yz = rot(dir.yz, -0.08);
	float t = 0.0;
	for(int i = 0 ; i < 70; i++)
	{
		float k = map(dir * t + pos);
		if(k < 0.01) break;
		t += k;
	}
	vec3 ip = pos + dir * t;
	vec3 L    = normalize(vec3(1.3,-1.2,1));
	vec3 sC   = vec3(3,2,1);
	vec3 sky  = pow(max(0.7, dot(L, dir)), 128.0) * sC + (pow(max(0.7, dot(L, dir)), 8.0) * sC) * 0.1;
	
	vec3 c    = vec3(0);
	if(t > 100.0) {
		c *= 0.7;
		
	} else {
		c += max(0.0, dot(calcNormal(ip), L)) * vec3(3,2,1) * 0.3;
	}
	
	if(ip.y > 0.0) {
		c += vec3(t) * 0.001 * vec3(1,2,3);
	} else {
		c = sky;
	}
	c += sky;
	c += (c / abs(dir.y)) * 0.1;
	gl_FragColor = vec4(c.xyzz);
}

