#ifdef GL_ES
precision mediump float;
#endif

uniform vec2 resolution;
uniform float time;
uniform vec2 mouse;

const vec3 lightDir = vec3(-0.3, 1.0, 0.57);

vec3 trans(vec3 p, float m)
{
  return mod(p, m) - m / 2.0;
}

float distanceFunction(vec3 pos){
	float dist1;
	float dist2;
	float dist0 = length(trans(pos, 8.0)) - 5.0;
	float buff = dist0;
	for(float i = 0.0; i < 16.0; i++){
		dist1 = buff;
		dist2 = length(trans(pos, 4.0 / i)) - 1.0 / i;
		buff = min(dist1, dist2);
	}
	return min(-dist0, buff) + 0.02;
}
 
vec3 getNormal(vec3 p)
{
  const float d = 0.0001;
  return
    normalize
    (
      vec3
      (
        distanceFunction(p+vec3(d,0.0,0.0))-distanceFunction(p+vec3(-d,0.0,0.0)),
        distanceFunction(p+vec3(0.0,d,0.0))-distanceFunction(p+vec3(0.0,-d,0.0)),
        distanceFunction(p+vec3(0.0,0.0,d))-distanceFunction(p+vec3(0.0,0.0,-d))
      )
    );
}
 
void main() {
  vec2 pos = (gl_FragCoord.xy*2.0 -resolution) / resolution.y;
 
  vec3 camPos = vec3(0.0, 0.0, 3.0) + vec3(mouse*10.0-5.0, (sin(time/6.0)+cos(time/2.0))*10.0);
  vec3 camDir = vec3(0.0, 0.0, -1.0);
  vec3 camUp = vec3(0.0, 1.0, 0.0) + vec3(sin(time/5.0), 0.0, 0.0);
  vec3 camSide = cross(camDir, camUp);
  float focus = 1.8;
 
  vec3 rayDir = normalize(camSide*pos.x + camUp*pos.y + camDir*focus);
 
  float t = 0.0, d;
  vec3 posOnRay = camPos;
 
  for(int i=0; i<32; ++i)
  {
    d = distanceFunction(posOnRay);
    t += d;
    posOnRay = camPos + t*rayDir;
  }
 
  vec3 normal = getNormal(posOnRay);
  vec3 color;
  if(abs(d) < 0.001)
  {
    float diff = clamp(dot(lightDir, normal), 0.1, 1.0);
    color = vec3(diff);
  }else
  {
    color = vec3(0.0);
  }
  gl_FragColor = vec4(color, 1.0);
}