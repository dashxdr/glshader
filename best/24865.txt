precision highp float;

uniform vec2 resolution;
uniform vec4 mouse;
uniform float time;

vec3 spherePosition;
vec2 e;
vec2 uv;
	
vec3 cameraPosition;
float focalLength = 2.0;
vec3 up = vec3(0, 1, 0);
vec3 right = vec3(1, 0, 0);
vec3 forward = vec3(0, 0, -1);

vec3 ro;
vec3 rd;
	
float eps = 0.001;
float t = 0.0;
float d = 0.0;
int steps = 0;

vec3 finalColor;

#define MAX_STEPS 64


float sdSphere(vec3 p, float r) {
	
    	return length(p) - r;
	
}

float map(vec3 p) {
	
	/* single Sphere */
    	spherePosition = vec3(0.0, 0.0, -2.0);
	//p -= spherePosition;
	//return sdSphere(p, 1.0);
	
	/* repeated Spheres */
	p.xyz = mod(p.xyz, 1.0) - vec3(0.5);
	return sdSphere(p, 0.25);
    	
}

vec3 calcNormal(vec3 p) {
	
	e = vec2(-1.0, 1.0) * 0.0001;
	return normalize(
		e.xyy * map(p + e.xyy) +
		e.yxy * map(p + e.yxy) +
		e.yyx * map(p + e.yyx) +
		e.xxx * map(p + e.xxx)
	);
	
}

void main() {
	
	uv = 2.0 * gl_FragCoord.xy / resolution - 1.0;
	uv.x *= resolution.x / resolution.y;
    
	cameraPosition = vec3(0, 0, sin(time));
	
	ro = cameraPosition;
	rd = normalize((forward * focalLength) + (right * uv.x) + (up * uv.y));
    
    	eps = 0.001;
    	t = 0.0;
    	d = 0.0;
	steps = 0;
	
    	for(int i = 0; i < MAX_STEPS; i++) {
        	d = map(ro + rd * t);
		if(d < eps || t > 20.0) break;
        	t += d;
		steps++;
    	}
	
	finalColor = vec3( 1.0 - float(steps) / float(MAX_STEPS) );
    /*
	vec3 finalColor = vec3(1.0); // white color
    	vec3 normal = calcNormal(ro + rd * t);
    	vec3 lightDir = normalize(vec3(sin(time)*10.0,10.0,cos(time)*10.0));
    	float diffuse = max(0.0, dot(normal, lightDir));
   	//finalColor *= diffuse;
	
    	float specular = clamp(dot(reflect(rd, normal), lightDir), 0.0, 1.0);
    	specular = pow(specular, 32.0);
    	finalColor *= (diffuse + specular);
*/
    	if(t > 20.0) {
        	finalColor = vec3(0.2);
    	}
	
    	gl_FragColor = vec4(finalColor, 1.0);
	
}